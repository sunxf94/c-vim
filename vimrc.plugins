" ==========================================
" 插件管理和配置项
" ==========================================

" #################### TODO ########################
"
" #################### 包依赖 ######################
" vim       8.0+
" python3   3.6+
" [powerline](https://github.com/powerline/fonts)

" #################### 插件管理 ####################

if !exists('g:plugins_groups')
    let g:plugins_groups=['go', 'php', 'shell', 'js']
endif

" 使用 vim-plug 管理插件
" 插件文档 [:hh 插件名称]
call plug#begin('~/.vim/plugins')

Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs' " 目录导航
Plug 'yianwillis/vimcdoc'   " vim文档中文版
Plug 'w0rp/ale' " w0rp/ale 语法检测 vim8以上支持
Plug 'Valloric/YouCompleteMe'   " 代码补全
Plug 'Raimondi/delimitMate' " 自动补全配对标点
Plug 'ntpeters/vim-better-whitespace'   " 去掉尾行空格
Plug 'junegunn/vim-easy-align'  " 快速赋值语句对齐
Plug 'Lokaltog/vim-easymotion'  " 高效移动 [<leader><leader> + w/fx/h/j/k/l]
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'  " 状态栏增强展示
Plug 'rakr/vim-one'  " 主题
" Plug 'morhetz/gruvbox' Plug 'KabbAmine/yowish.vim'
Plug 'tpope/vim-fugitive'   " vim内 git 操作, 配合 vim-airline 可以在状态栏展示分支
Plug 'majutsushi/tagbar'    " 方法列表
Plug 'kshenoy/vim-signature'    " 标记 & 跳转
Plug 'ctrlpvim/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'    " 搜索文件 & 方法
Plug 'luochen1990/rainbow'  " 括号显示增强
Plug 'scrooloose/nerdcommenter'     " 注释快捷键 [<leader> + cc/cu 注释/反注释]
Plug 'terryma/vim-expand-region'  " 快读选中区块

if count(g:plugins_groups, 'go')
    Plug 'fatih/vim-go'     " go的主要插件
elseif count(g:plugins_groups, 'php')
    Plug 'alvan/vim-php-manual'     " php函数手册 [shift + k]
elseif count(g:plugins_groups, 'shell')
    Plug 'Shougo/vimshell.vim'
endif

call plug#end()

" #################### 插件配置 ####################

" ale {
if has_key(g:plugs, 'ale')
    let g:ale_fix_on_save = 1
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '>'

    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

    " nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
    " nmap <silent> <Leader>en <Plug>(ale_next_wrap)

    nnoremap <silent> <Leader>ec :ALEToggle<CR>

    " troggle quickfix list
    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic_error location panel
            lopen
        endif
    endfunction
    nnoremap <Leader>s :call ToggleErrors()<cr>

    let g:ale_set_highlights = 1
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
endif

" YouCompleteMe {
" Ctrl + j/k 上下移动
" gd    跳转到定义处
" go    返回
if has_key(g:plugs, 'YouCompleteMe')
    "youcompleteme  默认tab  s-tab 和自动补全冲突
    let g:ycm_key_list_select_completion = ['<c-j>']
    let g:ycm_key_list_previous_completion = ['<c-k>']
    let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
    let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
    let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
    " 启用tags
    let g:ycm_collect_identifiers_from_tags_files = 1
    " 开启语法关键字补全
    let g:ycm_seed_identifiers_with_syntax= 1
    " 回车作为选中
    let g:ycm_key_list_stop_completion = ['<CR>']
    let g:ycm_echo_current_diagnostic = 0

        " \ 'php': ['re!\w{2}'],
    let g:ycm_semantic_triggers = {
        \ 'php': ['->', '::'],
        \ }

    " 关闭原型预览
    set completeopt=menu,menuone
    let g:ycm_add_preview_to_completeopt = 0
    " 关闭诊断信息
    let g:ycm_show_diagnostics_ui = 0
    " 日志级别
    let g:ycm_server_log_level = 'info'
    let g:ycm_min_num_identifier_candidate_chars = 2

    " 跳转到定义处, 当前buffer打开
    let g:ycm_goto_buffer_command = 'same-buffer'
    nnoremap gd :YcmCompleter GoToDeclaration<CR>
    nnoremap go <c-o>

    " 直接触发自动补全 insert模式下
    " let g:ycm_key_invoke_completion = '<C-Space>'
    " 白名单 加快大文件打开速度
    let g:ycm_filetype_whitelist = {
			\ "sh":1,
			\ "php":1,
			\ "html":1,
			\ "js":1,
            \ "go":1,
			\ }

    " php lsp 配置
    let s:lsp = '/home/sunxf/git/c-vim/plugins/lsp-examples'
    let g:ycm_language_server = [
        \   {
        \       'name': 'php',
        \       'cmdline': [ 'php', expand( s:lsp . '/php/vendor/bin/php-language-server.php' ) ],
        \       'filetypes': [ 'php' ],
        \   }
        \ ]
endif
" }

" delimitMate {
    au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
" }

" vim-expand-region {
    vmap v <Plug>(expand_region_expand)
    vmap V <Plug>(expand_region_shrink)
" }

" nerdcommenter {
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_php = 1
" }

" vim-better-whitespace {
    " 启动空格自动清除
    let g:better_whitespace_enabled=1
    let g:strip_whitespace_on_save=1
    " 关闭清除前确认
    let g:strip_whitespace_confirm=0
" }

" vim-easy-align {
" ,a=       对齐等号表达
" ,a:       对齐冒号表达式(json/map等)
    vmap <Leader>a <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
        let g:easy_align_delimiters = {}
    endif
        let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
    " Default:
    " If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
    let g:easy_align_ignore_groups = ['Comment', 'String']
" }

" vim-easymotion {
    let g:EasyMotion_smartcase = 1
    "let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><Leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><Leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <Leader><Leader>. <Plug>(easymotion-repeat)
" }

" ctrlp ctrlp.vim ctrlp-funky {

    " ctrlp.vim
    let g:ctrlp_map = '<Leader>p'
    let g:ctrlp_cmd = 'CtrlP'
    map <Leader>f :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
        \ }
    let g:ctrlp_working_path_mode='r'
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_max_height=15
    let g:ctrlp_mruf_max=100
    let g:ctrlp_follow_symlinks=1
    let g:ctrlp_tabpage_position='c'

    " ctrlpfunky
    " ctrlp插件1 - 不用ctag进行函数快速跳转
    " 当前页面搜索function
    nnoremap <Leader>w :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <Leader>E :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1

    let g:ctrlp_extensions = ['funky']
" }

" vim-fugitive {
    "git diff/git blame 在vim内使用比较方便 其他的还是习惯在命令行操作
    nnoremap <Leader>gf :Gdiff<CR>
    nnoremap <Leader>gb :Git blame<CR>
    nnoremap <Leader>gl :Git pull<CR>
    " nnoremap <Leader>gs :Gstatus<CR>
    " nnoremap <Leader>gl :Glog<CR>
    " not ready to open
    " <Leader>gc maps to :Gcommit<CR>
    " <Leader>gp maps to :Git push<CR>
" }

" vim-airline {
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    let g:airline_powerline_fonts=1
    let g:airline_theme='onedark'
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
    let g:airline_symbols.crypt = '🔒'
    let g:airline_symbols.linenr = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.maxlinenr = '☰ '
    let g:airline_symbols.branch = ''
    let g:airline_symbols.paste = '∥'
    let g:airline_symbols.spell = 'Ꞩ'
    let g:airline_symbols.notexists = 'Ɇ'
    let g:airline_symbols.dirty='⚡'
    " let g:airline_symbols.whitespace = 'Ξ'
    let g:airline#extensions#whitespace#enabled = 0

    "m，d，y，H，M分别表示月，日，年，时，分，也就是相应英文的首字母
    let g:airline_section_x = '%{strftime("%H:%M")}'
    " 是否打开tabline
    " let g:airline#extensions#wordcount#formatter = 'readingtime'
    " let g:airline#extensions#tabline#enabled = 1
    " let g:airline#extensions#tabline#left_sep = ' '
    " let g:airline#extensions#tabline#formatter = 'default'
" }

" rainbow {
    let g:rainbow_active = 1
    let g:rainbow_conf = {
    \	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \	'operators': '_,_',
    \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \	'separately': {
    \		'*': {},
    \		'tex': {
    \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \		},
    \		'lisp': {
    \			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \		},
    \		'vim': {
    \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \		},
    \		'html': {
    \			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \		},
    \		'css': 0,
    \	}
    \}
" }

" vim-one {

    let g:airline_theme='one'
    " 真实色彩 | 修复one主题 自动补全下的颜色问题
    if (empty($TMUX))
        if (has("nvim"))
            "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
            let $NVIM_TUI_ENABLE_TRUE_COLOR=1
        endif
        "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
        "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
        " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
        if (has("termguicolors"))
            set termguicolors
        endif
    endif
" }

" nerdtree nerdtreetabs {
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd Bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    " fix Nerdtree ^G before folder and file names OSX terminal vim
    let g:NERDTreeNodeDelimiter = "\u00a0"

    " nerdtreetabs
    map <Leader>n <plug>NERDTreeTabsToggle<CR>
    " 关闭同步
    " let g:nerdtree_tabs_synchronize_view=0
    " let g:nerdtree_tabs_synchronize_focus=0
    " 是否自动开启nerdtree
    let g:nerdtree_tabs_open_on_console_startup=1
" }

" tagbar {
    nnoremap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 0
    let g:tagbar_show_linenumbers = -1
    let g:tagbar_show_visibility = 0
    let g:tagbar_autoshowtag = 1
    autocmd FileType go,php nested :TagbarOpen

    " go语言的tagbar配置
    " 1. install gotags 'go get -u github.com/jstemmer/gotags'
    " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
    " for gotags. work with tagbar
"     let g:tagbar_type_go = {
        " \ 'ctagstype' : 'go',
        " \ 'kinds'     : [
            " \ 'p:package',
            " \ 'i:imports:1',
            " \ 'c:constants',
            " \ 'v:variables',
            " \ 't:types',
            " \ 'n:interfaces',
            " \ 'w:fields',
            " \ 'e:embedded',
            " \ 'm:methods',
            " \ 'r:constructor',
            " \ 'f:functions'
        " \ ],
        " \ 'sro' : '.',
        " \ 'kind2scope' : {
            " \ 't' : 'ctype',
            " \ 'n' : 'ntype'
        " \ },
        " \ 'scope2kind' : {
            " \ 'ctype' : 't',
            " \ 'ntype' : 'n'
        " \ },
        " \ 'ctagsbin'  : 'gotags',
        " \ 'ctagsargs' : '-sort -silent'
    " \ }
" }

" vim-php-manual {
    let g:php_manual_online_search_shortcut = ''
" }
