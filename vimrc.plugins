" ==========================================
" 插件管理和配置项
" ==========================================

" #################### 包依赖 ####################
" ctags

" #################### 插件管理 ####################

if !exists('g:plugins_groups')
    let g:plugins_groups=['php', 'shell', 'html', 'js']
endif

" 使用 vim-plug 管理插件
call plug#begin('~/.vim/plugins')

" 主题
Plug 'rakr/vim-one'

"w0rp/ale 语法检测 vim8以上支持
if v:version >= 800
    Plug 'w0rp/ale'
endif

" 代码补全 TODO 换一个
" Plug 'Valloric/YouCompleteMe'

" 自动补全配对标点
Plug 'Raimondi/delimitMate'

" 注释快捷键
Plug 'scrooloose/nerdcommenter'

" 去掉尾行空格
Plug 'bronson/vim-trailing-whitespace'

" 快速赋值语句对齐
" ,a=       对齐等号表达
" ,a:       对齐冒号表达式(json/map等)
Plug 'junegunn/vim-easy-align'

" 高效移动 [,, + w/fx/h/j/k/l]
Plug 'Lokaltog/vim-easymotion'

" 状态栏增强展示
Plug 'vim-airline/vim-airline'

" 暂时不确定是否需要
" Plug 'vim-airline/vim-airline-themes'

" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'

" 方法列表 <F9>
Plug 'majutsushi/tagbar'

" 目录导航
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'

" 标记和跳转
" m<Space>  del all
" m/        list all
" m.        add follow previous mark
Plug 'kshenoy/vim-signature'

" 文件搜索
Plug 'ctrlpvim/ctrlp.vim'
" ctrlp.vim的扩展 模糊搜索当前文件中所有函数
" <leader>fu
Plug 'tacahiroy/ctrlp-funky'

if count(g:plugins_groups, 'php')
    " shift + k     查看函数手册
    " leader + pd   生成注释
    Plug 'spf13/PIV'
endif


if count(g:plugins_groups, 'shell')
    Plug 'Shougo/vimshell.vim'
endif

if count(g:plugins_groups, 'html')
    Plug 'mattn/emmet-vim'
endif

" 暂时用不上 先放着吧

" git in vim
" Plug 'tpope/vim-fugitive'
" 选中区块
" Plug 'terryma/vim-expand-region'
" 多光标选中编辑
" Plug 'terryma/vim-multiple-cursors'
" ctrlspace
" Plug 'vim-ctrlspace/vim-ctrlspace'

call plug#end()

" #################### 插件配置 ####################

" ale {
if has_key(g:plugs, 'ale')
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '>'

    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

    nmap <silent> <leader>ep <Plug>(ale_previous_wrap)
    nmap <silent> <leader>en <Plug>(ale_next_wrap)

    nnoremap <silent> <leader>ec :ALEToggle<CR>

    " troggle quickfix list
    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic_error location panel
            lopen
        endif
    endfunction
    nnoremap <leader>s :call ToggleErrors()<cr>

    let g:ale_set_highlights = 1
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
endif

" }}}

"" YouCompleteMe {{{
    ""youcompleteme  默认tab  s-tab 和自动补全冲突
    ""let g:ycm_key_list_select_completion=['<c-n>']
    "let g:ycm_key_list_select_completion = ['<c-j>']
    ""let g:ycm_key_list_previous_completion=['<c-p>']
    "let g:ycm_key_list_previous_completion = ['<c-k>']
    "let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
    "let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
    "" let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
    "let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
    "let g:ycm_collect_identifiers_from_tags_files = 1
    "" 开启语法关键字补全
    "let g:ycm_seed_identifiers_with_syntax=1
    "" 回车作为选中
    "let g:ycm_key_list_stop_completion = ['<CR>']

    "let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开

    "" 跳转到定义处, 分屏打开
    "let g:ycm_goto_buffer_command = 'same-buffer'
    "let g:ycm_register_as_syntastic_checker = 0
    "" nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    "" nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
    "" nnoremap jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    "nnoremap gd :YcmCompleter GoToDeclaration<CR>
    "nnoremap od <c-o>

    "" 直接触发自动补全 insert模式下
    "" let g:ycm_key_invoke_completion = '<C-Space>'
    "" 黑名单,不启用
    "let g:ycm_filetype_blacklist = {
        "\ 'tagbar' : 1,
        "\ 'gitcommit' : 1,
        "\}
"" }

" delimitMate {{{
    au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
" }}}

" closetag {{{
    let g:closetag_html_style=1
" }}}

" nerdcommenter {{{
    let g:NERDSpaceDelims=1
" }}}

" trailingwhitespace {{{
    map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
    vmap <leader>a <Plug>(EasyAlign)
    nmap <leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
    " Default:
    " If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
    let g:easy_align_ignore_groups = ['Comment', 'String']
" }}}

" easymotion {{{
    let g:EasyMotion_smartcase = 1
    "let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <leader><leader>h <Plug>(easymotion-linebackward)
    map <leader><leader>j <Plug>(easymotion-j)
    map <leader><leader>k <Plug>(easymotion-k)
    map <leader><leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <leader><leader>. <Plug>(easymotion-repeat)
" }}}

" ctrlp ctrlp.vim{{{
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'
    map <leader>f :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
        \ }
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    " 如果安装了ag, 使用ag
    " if executable('ag')
    " " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    " let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " " ag is fast enough that CtrlP doesn't need to cache
    " let g:ctrlp_use_caching = 0
    " endif

    " ctrlpfunky
    " ctrlp插件1 - 不用ctag进行函数快速跳转
    nnoremap <leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1

    let g:ctrlp_extensions = ['funky']
" }}}

" fugitive {{{
    " :Gdiff  :Gstatus :Gvsplit
    nnoremap <leader>ge :Gdiff<CR>
    " not ready to open
    " <leader>gb maps to :Gblame<CR>
    " <leader>gs maps to :Gstatus<CR>
    " <leader>gd maps to :Gdiff<CR>  和现有冲突
    " <leader>gl maps to :Glog<CR>
    " <leader>gc maps to :Gcommit<CR>
    " <leader>gp maps to :Git push<CR>
" }}}

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    " let g:airline_theme = 'bubblegum'
    " 是否打开tabline
    " let g:airline#extensions#tabline#enabled = 1
" }}}

" rainbow_parentheses {{{
    " 不加入这行, 防止黑色括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}

" nerdtree nerdtreetabs {{{
    " map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    " fix Nerdtree ^G before folder and file names OSX terminal vim
    let g:NERDTreeNodeDelimiter = "\u00a0"


    " nerdtreetabs
    map <leader>n <plug>NERDTreeTabsToggle<CR>
    " 关闭同步
    " let g:nerdtree_tabs_synchronize_view=0
    " let g:nerdtree_tabs_synchronize_focus=0
    " 是否自动开启nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
" }}}

" ctrlspace {{{
    let g:airline_exclude_preview = 1
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
" }}}

" tagbar {{{
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    " let g:tagbar_autoshowtag = 1
    " let g:tagbar_show_visibility = 1
    " for ruby
    let g:tagbar_type_ruby = {
        \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
        \ ]
    \ }

    " go语言的tagbar配置
    " 1. install gotags 'go get -u github.com/jstemmer/gotags'
    " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
    " for gotags. work with tagbar
"     let g:tagbar_type_go = {
        " \ 'ctagstype' : 'go',
        " \ 'kinds'     : [
            " \ 'p:package',
            " \ 'i:imports:1',
            " \ 'c:constants',
            " \ 'v:variables',
            " \ 't:types',
            " \ 'n:interfaces',
            " \ 'w:fields',
            " \ 'e:embedded',
            " \ 'm:methods',
            " \ 'r:constructor',
            " \ 'f:functions'
        " \ ],
        " \ 'sro' : '.',
        " \ 'kind2scope' : {
            " \ 't' : 'ctype',
            " \ 'n' : 'ntype'
        " \ },
        " \ 'scope2kind' : {
            " \ 'ctype' : 't',
            " \ 'ntype' : 'n'
        " \ },
        " \ 'ctagsbin'  : 'gotags',
        " \ 'ctagsargs' : '-sort -silent'
    " \ }
" }}}

" piv {{{
    let g:DisableAutoPHPFolding = 1
" }}}

" javascript {{{
    " pangloss/vim-javascript
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"
" }}}
